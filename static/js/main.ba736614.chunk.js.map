{"version":3,"sources":["components/Navbar/index.js","components/Card/index.js","components/Page/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","guess","score","wins","topScore","Card","_this","this","onClick","id","style","backgroundImage","image","Component","Page","state","window","localStorage","getItem","images","refresh","clicked","setState","setItem","length","newImages","sort","Math","random","again","i","_this2","components_Navbar","map","components_Card","key","name","App","components_Page","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba736614.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar (props) {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark row\">\r\n            <div className = \"col-4\">\r\n                <a className=\"navbar-brand\" href=\"/\">Clicky Memory Game</a>\r\n            </div>\r\n            <div className = \"col-4\">\r\n                {props.guess}\r\n            </div>\r\n            <div className = \"col-4\">\r\n                Score: {props.score} | {props.wins > 0 ? (\"Total Wins: \" + props.wins) : (\"Top Score: \"+props.topScore)}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport './style.css';\r\nclass Card extends Component {\r\n  render(props) {\r\n    return (\r\n      <div className=\"card\"\r\n        onClick = {() => {this.props.onClick(this.props.id);}}\r\n        style={{backgroundImage:\"url(\"+this.props.image}}\r\n      >\r\n        {/* <img src={this.props.image} alt = {this.props.name}></img> */}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Card;\r\n","import React, {Component} from 'react';\r\nimport './style.css';\r\nimport Navbar from \"../Navbar\";\r\nimport Card from \"../Card\";\r\nimport images from \"../images.json\";\r\nclass Page extends Component {\r\n  state = {\r\n    score: 0,\r\n    topScore: window.localStorage.getItem(\"clicky-topScore\") || 0,\r\n    wins: window.localStorage.getItem(\"clicky-wins\") || 0,\r\n    guess: \"Click on an image!\",\r\n    images: images\r\n  };\r\n  refresh = id => {\r\n    if (!this.state.images[id].clicked) { //haven't clicked on this \r\n      let score = this.state.score +1;\r\n      let topScore = this.state.topScore;\r\n      //if new highscore\r\n      if (score > this.state.topScore) {\r\n        topScore = score;\r\n        //set local storage\r\n        window.localStorage.setItem(\"clicky-topScore\",score);\r\n      }\r\n      //if you've won, clear the images\r\n      if (score >= images.length) {\r\n        this.setState({\r\n          images: [],\r\n          score: 0,\r\n          topScore: score,\r\n          wins: this.state.wins + 1,\r\n          guess: \"You Win!\"\r\n        })\r\n        window.localStorage.setItem(\"clicky-wins\",this.state.wins);\r\n      } else {\r\n        let newImages = this.state.images;\r\n        newImages[id].clicked = true;\r\n        newImages = newImages.sort(() => Math.random() - 0.5)\r\n        this.setState({\r\n            images: newImages,\r\n            score,\r\n            topScore,\r\n            guess : \"Correct!\"\r\n        })\r\n      }\r\n    } else {  //lose the game\r\n      this.setState({\r\n        images:[],\r\n        score: 0,\r\n        guess: \"You Lose!\"\r\n      });\r\n    }\r\n  }\r\n  again = () =>{\r\n    for (let i=0; i < images.length; i++) {\r\n      images[i].clicked = false;\r\n    }\r\n    this.setState({\r\n      images:images\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar \r\n          score = {this.state.score}\r\n          topScore = {this.state.topScore}\r\n          guess = {this.state.guess}\r\n          wins = {this.state.wins}\r\n        />\r\n        <div className = \"container\">\r\n          <div className = \"row\">\r\n            {\r\n                this.state.images.map((image,i) => (\r\n                    <Card\r\n                    key = {i}\r\n                    id={i}\r\n                    name={image.name}\r\n                    image={image.image}\r\n                    onClick = {this.refresh}\r\n                    />\r\n                ))\r\n            }\r\n          </div>\r\n          {(this.state.images.length > 0) ||<div className =\"row end-screen\">\r\n            <div className=\"col-12\">\r\n              <h2 className=\"text-center\">{this.state.guess}</h2>\r\n              <button className =\"btn text-center col-12\"\r\n                onClick={this.again}\r\n              >Play Again?</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Page;\r\n","import React from \"react\";\nimport Page from \"./components/Page\";\nimport \"./App.css\";\nfunction App() {\n  return <Page />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}