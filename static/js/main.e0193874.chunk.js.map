{"version":3,"sources":["components/Navbar/index.js","components/Card/index.js","components/Page/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","guess","score","topScore","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clicked","setState","state","_this2","onClick","src","image","alt","name","Component","Page","images","refresh","sort","Math","random","components_Navbar","map","components_Card","App","components_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2yuBAmBeA,MAhBf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,uBAEJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACZJ,EAAMM,OAEXL,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAAjB,UACYJ,EAAMO,MADlB,iBACuCP,EAAMQ,YCiB1CC,qBA3Bb,SAAAA,EAAaT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KAMViB,QAAU,WACRP,EAAKQ,SAAS,CACZD,QAAU,SAPVP,EAAKS,MAAQ,CACfF,QAAU,MAHQP,sEAYbV,GAAO,IAAAoB,EAAAP,KACZ,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbiB,QAAW,WAAOD,EAAKH,UAAWG,EAAKpB,MAAMqB,YAE7CpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAekB,IAAKT,KAAKb,MAAMuB,MAAOC,IAAKX,KAAKb,MAAMyB,OACrExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,cAAcS,KAAKM,MAAMF,kBApBjCS,qBCyCJC,6MArCbR,MAAQ,CACNZ,MAAO,EACPC,SAAU,EACVF,MAAO,QACPsB,OAAQA,KAEVC,QAAU,WACNnB,EAAKQ,SAAS,CACVU,OAAQA,EAAOE,KAAK,kBAAMC,KAAKC,SAAW,gFAGzC,IAAAZ,EAAAP,KACP,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,CACE1B,MAASM,KAAKM,MAAMZ,MACpBC,SAAYK,KAAKM,MAAMX,SACvBF,MAASO,KAAKM,MAAMb,QAEtBL,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAEbS,KAAKM,MAAMS,OAAOM,IAAI,SAAAX,GAAK,OACvBtB,EAAAC,EAAAC,cAACgC,EAAD,CACAV,KAAMF,EAAME,KACZF,MAAOA,EAAMA,MACbF,QAAWD,EAAKS,sBA3BjBH,aCEJU,MAJf,WACE,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0193874.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar (props) {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark row\">\r\n            <div className = \"col-4\">\r\n                <a className=\"navbar-brand\" href=\"/\">Clicky Memory Game</a>\r\n            </div>\r\n            <div className = \"col-4\">\r\n                {props.guess}\r\n            </div>\r\n            <div className = \"col-4\">\r\n                Score: {props.score} | Top Score: {props.topScore}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport './style.css';\r\nclass Card extends Component {\r\n  constructor (props) {\r\n      super(props);\r\n      this.state = {\r\n    clicked : \"no\"\r\n  };\r\n  }\r\n  \r\n  clicked = () =>{\r\n    this.setState({\r\n      clicked : \"yes\"\r\n    })\r\n  }\r\n  render(props) {\r\n    return (\r\n      <div className=\"card col-md-3 col-4\"\r\n        onClick = {() => {this.clicked(); this.props.onClick();}}\r\n      >\r\n        <img className=\"card-img-top\" src={this.props.image} alt={this.props.name}/>\r\n        <div className=\"card-body\">\r\n            <h6 className= \"card-title\">{this.state.clicked}</h6>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Card;\r\n","import React, {Component} from 'react';\r\nimport './style.css';\r\nimport Navbar from \"../Navbar\";\r\nimport Card from \"../Card\";\r\nimport images from \"../images.json\";\r\nclass Page extends Component {\r\n  state = {\r\n    score: 0,\r\n    topScore: 0,\r\n    guess: \"wrong\",\r\n    images: images\r\n  };\r\n  refresh = () => {\r\n      this.setState({\r\n          images: images.sort(() => Math.random() - 0.5)\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar \r\n          score = {this.state.score}\r\n          topScore = {this.state.topScore}\r\n          guess = {this.state.guess}\r\n        />\r\n        <div className = \"container\">\r\n            <div className = \"row\">\r\n            {\r\n                this.state.images.map(image => (\r\n                    <Card\r\n                    name={image.name}\r\n                    image={image.image}\r\n                    onClick = {this.refresh}\r\n                    />\r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Page;\r\n","import React from \"react\";\nimport Page from \"./components/Page\";\n\nfunction App() {\n  return <Page />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}